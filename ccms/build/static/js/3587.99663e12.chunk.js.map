{"version":3,"file":"static/js/3587.99663e12.chunk.js","mappings":"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","sources":["sections/auth/new-password/newPasswordForm.js","pages/auth/NewPassword.js"],"sourcesContent":["import { useState } from 'react';\r\nimport * as Yup from 'yup';\r\nimport { useLocation, useNavigate } from 'react-router';\r\nimport { useSnackbar } from 'notistack';\r\n// form\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\n// @mui\r\nimport { IconButton, InputAdornment, Stack } from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\n// hooks\r\n// import useIsMountedRef from '../../../hooks/useIsMountedRef';\r\n// components\r\nimport { FormProvider, RHFTextField } from '../../../components/hook-form';\r\nimport Iconify from '../../../components/Iconify';\r\nimport { PATH_AUTH } from '../../../routes/paths';\r\nimport useAuth from '../../../hooks/useAuth';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\n// NewPasswordForm.propTypes = {\r\n//   onSent: PropTypes.func,\r\n//   onGetEmail: PropTypes.func,\r\n// };\r\n\r\nexport default function NewPasswordForm() {\r\n  const { resetPassword } = useAuth();\r\n  const navigate = useNavigate();\r\n  const {\r\n    state: { varificationCode },\r\n  } = useLocation();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n\r\n  const NewPasswordSchema = Yup.object().shape({\r\n    password: Yup.string().required('New Password is required'),\r\n    confirm_password: Yup.string()\r\n      .oneOf([Yup.ref('password'), null], \"Passwords don't match!\")\r\n      .required('Confirm New Password is required'),\r\n  });\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(NewPasswordSchema),\r\n    defaultValues: { token: varificationCode },\r\n  });\r\n\r\n  const {\r\n    handleSubmit,\r\n    formState: { isSubmitting },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      const resp = await resetPassword(data);\r\n      const Data = resp.data;\r\n      enqueueSnackbar('Password Change Successfully!');\r\n      if (Data.role === 'admin') {\r\n        navigate(PATH_AUTH.adminLogin, { replace: true });\r\n      } else if (Data.role === 'employee') {\r\n        navigate(PATH_AUTH.employeeLogin, { replace: true });\r\n      } else {\r\n        navigate(PATH_AUTH.login, { replace: true });\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n      <Stack spacing={3}>\r\n        <RHFTextField\r\n          name=\"password\"\r\n          label=\"New Password\"\r\n          type={showPassword ? 'text' : 'password'}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton onClick={() => setShowPassword(!showPassword)} edge=\"end\">\r\n                  <Iconify icon={showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'} />\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n        <RHFTextField\r\n          name=\"confirm_password\"\r\n          label=\"Confirm New Password\"\r\n          type={showPassword ? 'text' : 'password'}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton onClick={() => setShowConfirmPassword(!showConfirmPassword)} edge=\"end\">\r\n                  <Iconify icon={showConfirmPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'} />\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n\r\n        <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting}>\r\n          Change Password\r\n        </LoadingButton>\r\n      </Stack>\r\n    </FormProvider>\r\n  );\r\n}\r\n","import { Link as RouterLink } from 'react-router-dom';\r\n// @mui\r\nimport { Box, Button, Container, Typography } from '@mui/material';\r\nimport { styled } from '@mui/material/styles';\r\n// layouts\r\nimport LogoOnlyLayout from '../../layouts/LogoOnlyLayout';\r\n// routes\r\nimport { PATH_AUTH } from '../../routes/paths';\r\n// components\r\nimport Iconify from '../../components/Iconify';\r\nimport Page from '../../components/Page';\r\n// sections\r\nimport { NewPasswordForm } from '../../sections/auth/new-password';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst RootStyle = styled('div')(({ theme }) => ({\r\n  display: 'flex',\r\n  height: '100%',\r\n  alignItems: 'center',\r\n  padding: theme.spacing(12, 0),\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function VerifyCode() {\r\n  return (\r\n    <Page title=\"Verify\" sx={{ height: 1 }}>\r\n      <RootStyle>\r\n        <LogoOnlyLayout />\r\n\r\n        <Container>\r\n          <Box sx={{ maxWidth: 480, mx: 'auto' }}>\r\n            <Button\r\n              size=\"small\"\r\n              component={RouterLink}\r\n              to={PATH_AUTH.resetPassword}\r\n              startIcon={<Iconify icon={'eva:arrow-ios-back-fill'} width={20} height={20} />}\r\n              sx={{ mb: 3 }}\r\n            >\r\n              Back\r\n            </Button>\r\n\r\n            <Typography variant=\"h3\" paragraph>\r\n              Please enter new password!\r\n            </Typography>\r\n            {/* <Typography sx={{ color: 'text.secondary' }}>\r\n              We have emailed a 6-digit confirmation code, please enter the code in below box to verify your email.\r\n            </Typography> */}\r\n\r\n            <Box sx={{ mt: 5, mb: 3 }}>\r\n              <NewPasswordForm />\r\n            </Box>\r\n          </Box>\r\n        </Container>\r\n      </RootStyle>\r\n    </Page>\r\n  );\r\n}\r\n"],"names":["NewPasswordForm","resetPassword","useAuth","navigate","useNavigate","varificationCode","useLocation","state","enqueueSnackbar","useSnackbar","useState","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","NewPasswordSchema","Yup","shape","password","required","confirm_password","oneOf","methods","useForm","resolver","yupResolver","defaultValues","token","handleSubmit","isSubmitting","formState","onSubmit","data","resp","Data","role","PATH_AUTH","replace","console","error","Stack","spacing","name","label","type","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","edge","Iconify","icon","LoadingButton","fullWidth","size","variant","loading","RootStyle","styled","display","height","alignItems","padding","theme","VerifyCode","Page","title","sx","LogoOnlyLayout","Container","Box","maxWidth","mx","Button","component","RouterLink","to","startIcon","width","mb","Typography","paragraph","mt"],"sourceRoot":""}